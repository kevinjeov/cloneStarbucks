BEM (block Element Modifier)
  HTML 클래스 속성의 작명법

  요소__일부분 - Underscore(Lodash) 기호로 요소의 일부분을 표시
    예시 >>
    ※ 일반적으로 사용 시 .container .name 으로 CSS 적용 시 두개의 클래스가 적용되어버림
       확실히 지정해 주기 위해서는 .container > .name 으로 하던지 or
       .container .item .name 등으로 구분해 줘야함
      <div class="container">
        <div class="name"></div>
        <div class="item">
          <div class="name"></div>
        </div>
      </div>

    ※ BEM 작명을 할 시 .container .container__name을 사용함으로 이러한 위험부담이 없어짐
      <div class="container">
        <div class="container__name"></div>
        <div class="item">
          <div class="item__name"></div>
        </div>
      </div>

  요소--상태 - Hyphen(Dash) 기호로 요소의 상태를 표시
    예시 >>
    ※ 버튼에 종속되어있다는 느낌이 없음
      <div class="btn primary"></div>
      <div class="btn success"></div>
      <div class="btn error"></div>

    ※ BTM 작명을 통해 버튼의 상태를 명확하게 표시해줌
      <div class="btn btn--primary"></div>
      <div class="btn btn--success"></div>
      <div class="btn btn--error"></div>

cdn 라이브러리 사이트
  링크 : https://cdnjs.com/libraries

lodash cdn
  window 객체는 브라우저의 창을 의미함
  문서정보 : https://lodash.com/docs/4.17.15
  
  ※ 스크립트 임포트
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"\
    integrity="sha512-WFN04846sdKMIP5LKNphMaWzU7YpMyCU245etK3g/2ARYbPK9Ub18eG+ljU96qKRCWh+quCY7yefSmlkQw1ANQ=="\
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  lodash throttle 기능은 자주쓰임

  사용법 >> _.throttle(함수, milsec)

gsap cdn
  JS에서 사용가능한 애니메이션 라이브러리
  문서정보 : https://greensock.com/docs/v3/GSAP
  
  ※ 스크립트 임포트
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"\
    integrity="sha512-H6cPm97FAsgIKmlBA4s774vqoN24V5gSQL4yBTDOY2su2DeXZVhQPxFK4P6GPdnZqM9fg1G3cMv5wD7e6cFLZQ=="\
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  사용법 >> gsap.to(요소, 지속시간, 옵션)

swiper JS
  스와이핑 (요소 수직 슬라이드) 를 할 수 있게 해주는 라이브러리
  문서정보 : https://swiperjs.com/swiper-api

  ※ 스크립트 임포트
    <script defer src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

  사용법
  <div class="swiper-containers">
    <!-- Additional required wrapper -->
    <div class="swiper-wrapper">
      <!-- Slides -->
      <div class="swiper-slide">Slide 1</div>
      <div class="swiper-slide">Slide 2</div>
      <div class="swiper-slide">Slide 3</div>
      ...
    </div>
    <!-- If we need pagination -->
    <div class="swiper-pagination"></div>
  
    <!-- If we need navigation buttons -->
    <div class="swiper-button-prev"></div>
    <div class="swiper-button-next"></div>
  
    <!-- If we need scrollbar -->
    <div class="swiper-scrollbar"></div>
  </div>

Padding 을 이용하여 높이 비율 조절 (Youtube, Vimeo 등에 사용 가능)
  HTML
    <div class="container">
      <div class="item" ></div>
    </div>
  
  CSS
  .container {
    width: 100px;
    background-color: royalblue;
  }
  .container .item {
    width: 100%;
    height: 0;
    padding-top: 56.25%; // 16:9 비율로 출력
  }

YOUTUBE IFRAME api
  Youtube 내장 플레이어 API
  문서정보 : https://developers.google.com/youtube/iframe_api_reference?hl=ko

  사용법

  <!DOCTYPE html>
  <html>
    <body>
      <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
      <div id="player"></div>

      <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        let tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        let firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        let player;
        function onYouTubeIframeAPIReady() {
          player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: 'M7lc1UVf-VE',
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            }
          });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
          event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        let done = false;
        function onPlayerStateChange(event) {
          if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
          }
        }
        function stopVideo() {
          player.stopVideo();
        }
      </script>
    </body>
  </html>

ScrollMagic cdn
  스크롤에 따른 애니메이션을 구현하는 기능

  ※ 스크립트 임포트
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.8/ScrollMagic.min.js"\
    integrity="sha512-8E3KZoPoZCD+1dgfqhPbejQBnQfBXe8FuwL4z/c8sTrgeDMFEnoyTlH3obB4/fV+6Sg0a0XF+L/6xS4Xx1fUEg=="\
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

HTML ENTITIES
  특수문자 사용
  문서정보 : https://dev.w3.org/html5/html-author/charref